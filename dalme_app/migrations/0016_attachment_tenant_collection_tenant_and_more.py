# Generated by Django 4.2.2 on 2023-12-08 15:21
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

MOVE_SCHEMA = """
BEGIN;

DO $$
  DECLARE
  tb text;
BEGIN
  FOR tb IN
    SELECT table_name
    FROM information_schema.tables
    WHERE table_schema = 'dalme' AND table_name <> 'django_migrations'
    LOOP

    -- Drop the existing (empty) table from the dalme schema so we can replace it.
    EXECUTE format('DROP TABLE dalme.%I CASCADE;', tb);

    BEGIN
      -- Move the table from the public schema to the dalme schema.
      EXECUTE format('ALTER TABLE public.%I SET SCHEMA dalme;', tb);

    -- Handle edge cases.
    EXCEPTION
      WHEN SQLSTATE '42P01' THEN
        BEGIN
          -- The editorspick table can be disregarded if it's there.
          IF tb = 'wagtailsearch_editorspick' THEN
            CONTINUE;
          END IF;
        END;
      WHEN OTHERS THEN
        RAISE;
    END;

    -- Clone the (empty) table back to the public schema, symmetry is restored.
    EXECUTE format('CREATE TABLE public.%I (like dalme.%I including all)', tb, tb);

  END LOOP;
END $$;

COMMIT;
"""


def create_tenants(apps, schema_editor):
    """Create rows for Tenants as registered in the settings."""
    # We should use apps.get_model here rather than importing the models but if
    # we do that then django-tenants doesn't actually create the schema when
    # the tenant object is created. If we do it this way here we will trigger
    # a 'nested' migration for each tenant we create and then we end up with
    # the desired result. It's a hack but fits the bill for the time being.
    from ida.models import Domain, Tenant

    for tenant in settings.TENANTS():
        domain, name, schema_name = tenant.value
        tenant_obj = Tenant.objects.create(name=name, schema_name=schema_name)
        Domain.objects.create(domain=domain, tenant=tenant_obj, is_primary=False)


def scope_models(apps, schema_editor):
    """Key the DALME tenant to any existing, scoped model instances."""
    scoped = [
        apps.get_model('dalme_app', 'Attachment'),
        apps.get_model('dalme_app', 'Collection'),
        apps.get_model('dalme_app', 'CollectionMembership'),
        apps.get_model('dalme_app', 'Comment'),
        apps.get_model('dalme_app', 'SavedSearch'),
        apps.get_model('dalme_app', 'Tag'),
        apps.get_model('dalme_app', 'Task'),
        apps.get_model('dalme_app', 'TaskList'),
        apps.get_model('dalme_app', 'WorkLog'),
        apps.get_model('dalme_app', 'Workflow'),
    ]

    Tenant = apps.get_model('ida', 'Tenant')  # noqa: N806
    dalme = Tenant.objects.get(name=settings.TENANTS().DALME.value.name)
    for cls in scoped:
        cls.objects.all().update(tenant=dalme)


class Migration(migrations.Migration):
    dependencies = [
        ('ida', '0001_initial'),
        ('dalme_app', '0015_create_options'),
    ]

    operations = [
        # Create tenant records. Must come first (so the schema exists for the
        # MOVE_SCHEMA stage.
        migrations.RunSQL('SET CONSTRAINTS ALL IMMEDIATE;'),
        migrations.RunPython(create_tenants),
        migrations.RunSQL('SET CONSTRAINTS ALL DEFERRED;'),
        # Move all TENANT_APPS tables from the 'public' to the 'dalme' db schema.
        migrations.RunSQL(MOVE_SCHEMA),
        migrations.AddField(
            model_name='attachment',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='collection',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='collectionmembership',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='comment',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='savedsearch',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='tag',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='task',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='tasklist',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='workflow',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AddField(
            model_name='worklog',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        # Key all scoped models to the DALME tenant.
        migrations.RunPython(scope_models),
        migrations.AlterField(
            model_name='attachment',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='collection',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='collectionmembership',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='tag',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='task',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='tasklist',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='workflow',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
        migrations.AlterField(
            model_name='worklog',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ida.tenant'),
        ),
    ]
