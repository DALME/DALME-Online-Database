# Generated by Django 4.2.2 on 2023-08-02 14:06

import django_currentuser.middleware
import django_tenants.postgresql_backend.base

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models, transaction

from dalme_app.models import (
    Attachment,
    Collection,
    CollectionMembership,
    Comment,
    Domain,
    Tenant,
)

MOVE_SCHEMA = """
BEGIN;

DO $$
  DECLARE
  tb text;
BEGIN
  FOR tb IN
    SELECT table_name
    FROM information_schema.tables
    WHERE table_schema = 'dalme' AND table_name <> 'django_migrations'
    LOOP

    -- Drop the existing (empty) table from the dalme schema so we can replace it.
    EXECUTE format('DROP TABLE dalme.%I CASCADE;', tb);

    BEGIN
      -- Move the table from the public schema to the dalme schema.
      EXECUTE format('ALTER TABLE public.%I SET SCHEMA dalme;', tb);
    -- Handle edge cases.
    EXCEPTION
      WHEN SQLSTATE '42P01' THEN
        BEGIN
          -- The editorspick table can be disregarded if it's there.
          IF tb = 'wagtailsearch_editorspick' THEN
            CONTINUE;
          END IF;
        END;
      WHEN OTHERS THEN
        RAISE;
    END;

    -- Clone the (empty) table back to the public schema, symmetry is restored.
    -- EXECUTE format('CREATE TABLE public.%I (like dalme.%I including all)', tb, tb);

  END LOOP;
END $$;

COMMIT;
"""

SCOPED = [Attachment, Comment, Collection, CollectionMembership]


def scope_models(apps, schema_editor):
    """Key the DALME tenant to any existing, scoped model instances."""
    dalme = Tenant.objects.get(name=settings.TENANTS().DALME.value.name)
    for cls in SCOPED:
        cls.objects.all().update(tenant=dalme)


def create_tenants(apps, schema_editor):
    """Create rows for Tenants as registered in the settings."""
    for tenant in settings.TENANTS():
        domain, name, schema_name = tenant.value
        with transaction.atomic():
            tenant_obj = Tenant.objects.create(name=name, schema_name=schema_name)
            Domain.objects.create(domain=domain, tenant=tenant_obj, is_primary=False)


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dalme_app', '0015_create_options'),
    ]

    operations = [
        # Define tenant models.
        migrations.CreateModel(
            name='Tenant',
            fields=[
                (
                    'schema_name',
                    models.CharField(
                        db_index=True,
                        max_length=63,
                        unique=True,
                        validators=[django_tenants.postgresql_backend.base._check_schema_name],  # noqa: SLF001
                    ),
                ),
                ('id', models.AutoField(db_index=True, primary_key=True, serialize=False, unique=True)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('modification_timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                (
                    'creation_user',
                    models.ForeignKey(
                        default=django_currentuser.middleware.get_current_user,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(app_label)s_%(class)s_creation',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'modification_user',
                    models.ForeignKey(
                        default=django_currentuser.middleware.get_current_user,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(app_label)s_%(class)s_modification',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TenantRole',
            fields=[
                ('id', models.AutoField(db_index=True, primary_key=True, serialize=False, unique=True)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('modification_timestamp', models.DateTimeField(auto_now=True, null=True)),
                (
                    'level',
                    models.CharField(
                        choices=[('admin', 'Admin'), ('member', 'Member')], default='member', max_length=6
                    ),
                ),
                (
                    'creation_user',
                    models.ForeignKey(
                        default=django_currentuser.middleware.get_current_user,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(app_label)s_%(class)s_creation',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'modification_user',
                    models.ForeignKey(
                        default=django_currentuser.middleware.get_current_user,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(app_label)s_%(class)s_modification',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dalme_app.tenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('domain', models.CharField(db_index=True, max_length=253, unique=True)),
                ('is_primary', models.BooleanField(db_index=True, default=True)),
                ('id', models.AutoField(db_index=True, primary_key=True, serialize=False, unique=True)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('modification_timestamp', models.DateTimeField(auto_now=True, null=True)),
                (
                    'creation_user',
                    models.ForeignKey(
                        default=django_currentuser.middleware.get_current_user,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(app_label)s_%(class)s_creation',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'modification_user',
                    models.ForeignKey(
                        default=django_currentuser.middleware.get_current_user,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(app_label)s_%(class)s_modification',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'tenant',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='dalme_app.tenant'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='tenantrole',
            constraint=models.UniqueConstraint(fields=('tenant', 'user'), name='uq_tenant_role_tenant_user'),
        ),
        # Create tenant records.
        migrations.RunSQL('SET CONSTRAINTS ALL IMMEDIATE;'),
        migrations.RunPython(create_tenants),
        migrations.RunSQL('SET CONSTRAINTS ALL DEFERRED;'),
        # Migrate tenant aware models from the public schema to the DALME schema.
        migrations.RunSQL(MOVE_SCHEMA),
        # Scope tenant aware models.
        migrations.AddField(
            model_name='attachment',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.AddField(
            model_name='comment',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.AddField(
            model_name='collection',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.AddField(
            model_name='collectionmembership',
            name='tenant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.RunPython(scope_models),
        migrations.AlterField(
            model_name='attachment',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.AlterField(
            model_name='collection',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
        migrations.AlterField(
            model_name='collectionmembership',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dalme_app.tenant'),
        ),
    ]
