# Generated by Django 4.2.2 on 2024-02-15 15:29
from django.db import connection, migrations

# The existing data has been synchronized between all the schemas at some point
# automatically during the migrations process, so we need to clean that up via
# migrations. For the given set of 'tenant' tables, only the 'dalme' schema
# should have any data at all in it (at this point).
#
# There is a complication in that the 'wagtailcore_pagerevision' table has been
# renamed to 'wagtailcore_revision' and none of those records have come over to
# the newly created schemas along with everything else. Therefore, we need to
# ensure we copy that data from the 'public' schema to the 'dalme' schema but into
# the new 'wagtailcore_revision' table in order to preserve it. The new
# 'Revision' model also has new fields so we need to meet the demands of those
# requirements here also.
#
# https://docs.wagtail.org/en/stable/releases/4.0.html#pagerevision-replaced-with-revision
# https://github.com/wagtail/wagtail/blob/222cf7de7205d5a248e9d4bcfecb35901e5220e1/wagtail/models/__init__.py#L2732

# We will do all of this here then and proceed to clean up the other schemas in
# a subsequent migration once the data is accounted for. Once all the data
# has been moved across we are free to delete the 'wagtailcore_pagerevision'
# table altogether.


def revision_mapper(apps, page_content_type, page_revision):
    """Remap page revision data to revision data."""
    ContentType = apps.get_model('contenttypes', 'ContentType')  # noqa: N806
    DALMEPage = apps.get_model('dalme_public', 'DALMEPage')  # noqa: N806

    obj_id = page_revision.pop('id')
    page = DALMEPage.objects.get(pk=obj_id)
    content_type = ContentType.objects.get_for_model(page.specific)

    return {
        'base_content_type': page_content_type,
        'content_type': content_type,
        'object_id': obj_id,
        **page_revision,
    }


def migrate_page_revisions(apps, schema_editor):
    """Transform Wagtail PageRevision objects into Revision objects."""
    ContentType = apps.get_model('contenttypes', 'ContentType')  # noqa: N806
    Page = apps.get_model('wagtail', 'Page')  # noqa: N806
    page_content_type = ContentType.objects.get_for_model(Page)

    cursor = connection.cursor()
    cursor.execute('SELECT * from public.wagtailcore_pagerevision;')
    columns = [col[0] for col in cursor.description]
    page_revisions = [dict(zip(columns, row, strict=True)) for row in cursor.fetchall()]
    revisions = [revision_mapper(apps, page_content_type, page_revision) for page_revision in page_revisions]

    Revision = apps.get_model('wagtail', 'Revision')  # noqa: N806

    connection.set_schema('dalme', True)
    Revision.objects.bulk_create(revisions, batch_size=1000)
    connection.set_schema_to_public()


class Migration(migrations.Migration):
    dependencies = [
        ('dalme_app', '0016_attachment_tenant_collection_tenant_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_page_revisions),
        migrations.RunSQL('DROP TABLE public.wagtailcore_pagerevision CASCADE;'),
    ]
