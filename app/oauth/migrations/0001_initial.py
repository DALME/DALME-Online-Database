# Generated by Django 5.1.4 on 2024-12-29 19:25

import oauth2_provider.generators
import oauth2_provider.models

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import domain.models.avatar


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProxyGroup',
            fields=[],
            options={
                'verbose_name': 'Group',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                (
                    'avatar',
                    domain.models.avatar.AvatarField(
                        blank=True,
                        help_text='Profile image or avatar.',
                        null=True,
                        upload_to=domain.models.avatar.avatar_file_path,
                    ),
                ),
                ('full_name', models.CharField(blank=True, max_length=255)),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                (
                    'client_id',
                    models.CharField(
                        db_index=True,
                        default=oauth2_provider.generators.generate_client_id,
                        max_length=100,
                        unique=True,
                    ),
                ),
                ('redirect_uris', models.TextField(blank=True, help_text='Allowed URIs list, space separated')),
                (
                    'post_logout_redirect_uris',
                    models.TextField(
                        blank=True, default='', help_text='Allowed Post Logout URIs list, space separated'
                    ),
                ),
                (
                    'client_type',
                    models.CharField(choices=[('confidential', 'Confidential'), ('public', 'Public')], max_length=32),
                ),
                (
                    'authorization_grant_type',
                    models.CharField(
                        choices=[
                            ('authorization-code', 'Authorization code'),
                            ('implicit', 'Implicit'),
                            ('password', 'Resource owner password-based'),
                            ('client-credentials', 'Client credentials'),
                            ('openid-hybrid', 'OpenID connect hybrid'),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    'client_secret',
                    oauth2_provider.models.ClientSecretField(
                        blank=True,
                        db_index=True,
                        default=oauth2_provider.generators.generate_client_secret,
                        help_text='Hashed on Save. Copy it now if this is a new secret.',
                        max_length=255,
                    ),
                ),
                ('hash_client_secret', models.BooleanField(default=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('skip_authorization', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                (
                    'algorithm',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('', 'No OIDC support'),
                            ('RS256', 'RSA with SHA-2 256'),
                            ('HS256', 'HMAC with SHA-2 256'),
                        ],
                        default='',
                        max_length=5,
                    ),
                ),
                (
                    'allowed_origins',
                    models.TextField(
                        blank=True, default='', help_text='Allowed origins list to enable CORS, space separated'
                    ),
                ),
                ('logo', models.ImageField(blank=True, null=True, upload_to='')),
                (
                    'user',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='%(app_label)s_%(class)s',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'OAuth Application',
            },
        ),
        migrations.CreateModel(
            name='GroupProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'group_type',
                    models.IntegerField(
                        choices=[(1, 'Admin'), (2, 'DAM'), (3, 'Team'), (4, 'Knowledge Base'), (5, 'Website')]
                    ),
                ),
                ('description', models.CharField(max_length=255)),
                (
                    'group',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='auth.group'
                    ),
                ),
            ],
        ),
    ]
