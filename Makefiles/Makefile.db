# ; -*- mode: makefile ;-*-
# vi: set ft=make :
DB_VOLUME := pgdata
DUMPS := /opt/db/dumps
RESTORE_SCHEMA := restore

db.create_restore_schema:
	docker compose exec \
		$(PROJECT).db \
		psql -wx \
		--dbname $(PROJECT) \
		--username $(PROJECT) \
		-c 'CREATE SCHEMA IF NOT EXISTS $(RESTORE_SCHEMA)'
.PHONY: db.create_restore_schema

db.drop: confirm
	@$(MAKE) infra.stop
	docker rm -f $$(docker ps -a -q)
	docker volume rm $(DB_VOLUME)
	@$(MAKE) infra.start
.PHONY: db.drop

db.dump:
	docker compose exec \
		$(PROJECT).db \
		pg_dump \
		-Fc \
		--dbname $(PROJECT) \
		--username $(PROJECT) \
		-f $(DUMPS)/$(PROJECT)-$$(date -u +"%Y%m%d-T%s").dump
.PHONY: db.dump

db.dump_sql:
	docker compose exec \
		$(PROJECT).db \
		pg_dump \
		-Fp -s \
		--dbname $(PROJECT) \
		--username $(PROJECT) \
		-f $(DUMPS)/$(PROJECT)-$$(date -u +"%Y%m%d-T%s").dump
.PHONY: db.dump

db.load: db.create_restore_schema
ifndef dump
	$(error No local dump specified to restore. \
		Usage: make db.load dump='dalme-20231025-T1698276955.dump')
else
	docker exec -i \
		$(PROJECT).db \
		pg_restore \
		--clean \
		--verbose \
		--if-exists \
		--schema=$(RESTORE_SCHEMA) \
		--dbname=$(PROJECT) \
		--username=$(PROJECT) \
		$(DUMPS)/$(dump)
endif
.PHONY: db.load

db.migrate:
	docker compose run --rm \
		$(PROJECT).web \
		python manage.py migrate_schemas $(args)
.PHONY: db.migrate

db.migrate.fake:
	docker compose run --rm \
		$(PROJECT).web \
		python manage.py migrate_schemas --fake $(args)
.PHONY: db.migrate.fake

db.migrations.make:
	docker compose run --rm \
		$(PROJECT).web \
		python manage.py makemigrations
.PHONY: db.migrations.make

db.migrations.empty:
ifndef app
	$(error Target app not specified. \
		Usage: make db.migrations.empty app='core')
else
	docker compose run --rm \
		$(PROJECT).web \
		python manage.py makemigrations --empty $(app)
endif
.PHONY: db.migrations.empty

db.migrations.merge:
	docker compose run --rm \
		$(PROJECT).web \
		python manage.py migrations.make --merge
.PHONY: db.migrations.merge

db.migrations.show:
	docker compose run --rm \
		$(PROJECT).web \
		python manage.py showmigrations
.PHONY: db.migrations.show

db.psql:
	PGPASSWORD=$(PROJECT) \
		docker compose exec \
		$(PROJECT).db \
		psql -wx \
		--username $(PROJECT) \
		--dbname $(PROJECT)
.PHONY: db.psql

db.shell:
	PGPASSWORD=$(PROJECT) \
		docker compose exec \
		$(PROJECT).db \
		bash
.PHONY: db.shell

db.help:
	@echo "  db.drop                drop the db volume"
	@echo "  db.dump                dump the dev database to sql (data only, no schema)"
	@echo "  db.load                restore a local sql dump"
	@echo "  db.migrations.empty    generate an empty database revision"
	@echo "  db.migrations.make     generate a database revision"
	@echo "  db.migrations.merge    merge database revisions"
	@echo "  db.migrations.show     show database revision state"
	@echo "  db.migrate             apply all upgrades to the database schema"
	@echo "  db.migrate.fake        run faked migrations"
	@echo "  db.migrate.revert      revert migrations for an app"
	@echo "  db.psql                shell into psql on the service"
	@echo "  db.shell               shell into the db container"
	@echo ""
.PHONY: db.help
