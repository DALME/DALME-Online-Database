"""Create entries necessary for new data schemas."""

import os

from django.apps import apps
from django.db import connection, transaction

from ida.models import (
    Project,
    Tenant,
    ZoteroCollection,
)

from .base import BaseStage


class Stage(BaseStage):
    """Fixes after finishing all data migrations."""

    name = '11 Post fixes'

    @transaction.atomic
    def apply(self):
        """Execute the stage."""
        self.adjust_id_columns()
        self.create_project_and_library_entries()

    @transaction.atomic
    def adjust_id_columns(self):
        """Adjust autogenerated id sequences."""
        app_labels = [
            'taggit',
            'wagtailadmin',
            'wagtailcore',
            'wagtaildocs',
            'wagtailembeds',
            'wagtailforms',
            'wagtailimages',
            'wagtailredirects',
            'wagtailusers',
            'public',
        ]

        for label in app_labels:
            self.logger.info('Processing "%s" models', label)
            app_config = apps.get_app_config(label)
            if app_config.models_module is not None:
                for model in app_config.get_models():
                    model_name = model.__name__.lower()
                    qualified_name = f'{label}_{model_name}'
                    self.logger.info('Copying "%s"', qualified_name)

                    with connection.cursor() as cursor:
                        cursor.execute(f'SELECT * FROM dalme.{qualified_name};')
                        rows = self.map_rows(cursor)
                        id_list = [int(row['id']) for row in rows if row.get('id')]
                        if id_list:
                            new_seq_start = max(id_list) + 1
                            cursor.execute(
                                f'ALTER TABLE dalme.{qualified_name} ALTER COLUMN id RESTART WITH {new_seq_start};'
                            )

    @transaction.atomic
    def create_project_and_library_entries(self):
        # DALME
        self.logger.info('Creating project and library entries for DALME')
        collections = [
            {
                'zotero_id': 'A4QHN348',
                'label': 'Editions',
                'has_biblio_sources': True,
            },
            {
                'zotero_id': 'BKW2PVCM',
                'label': 'Glossaries and dictionaries',
                'has_biblio_sources': False,
            },
            {
                'zotero_id': 'QM9AZNT3',
                'label': 'Methodology',
                'has_biblio_sources': False,
            },
            {
                'zotero_id': 'SLIT6LID',
                'label': 'Studies',
                'has_biblio_sources': False,
            },
            {
                'zotero_id': 'FRLVXUWL',
                'label': 'Other resources',
                'has_biblio_sources': False,
            },
        ]
        tenant = Tenant.objects.get(name='DALME')
        new_project = Project.objects.create(
            name='DALME',
            description='The Documentary Archaeology of Late Medieval Europe',
            zotero_library_id=int(os.environ.get('ZOTERO_LIBRARY_ID')),
            zotero_api_key=os.environ.get('ZOTERO_API_KEY'),
            tenant=tenant,
        )

        for collection in collections:
            collection.update(project=new_project)
            ZoteroCollection.objects.create(**collection)

        # GP
        self.logger.info('Creating project and library entries for GP')
        tenant = Tenant.objects.get(name='Global Pharmacopeias')
        new_project = Project.objects.create(
            name='GP',
            description='Global Pharmacopeias',
            zotero_library_id=int(os.environ.get('ZOTERO_LIBRARY_ID_GP')),
            zotero_api_key=os.environ.get('ZOTERO_API_KEY_GP'),
            tenant=tenant,
        )
