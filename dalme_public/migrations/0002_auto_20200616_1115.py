# Generated by Django 2.2.4 on 2020-06-16 15:15

import dalme_public.blocks
from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('dalme_app', '0143_auto_20200408_1214'),
        ('dalme_public', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='essay',
            name='alternate_author',
            field=models.CharField(blank=True, help_text='An optional name field that will be displayed as the author of this page instead of the user who created it.', max_length=127, null=True),
        ),
        migrations.AddField(
            model_name='essay',
            name='source_set',
            field=models.ForeignKey(blank=True, help_text='Optional, select a particular public set for the source associated with this essay. The source must be a member of the set chosen or the page will not validate.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='essays', to='dalme_app.Set'),
        ),
        migrations.AddField(
            model_name='featuredinventory',
            name='alternate_author',
            field=models.CharField(blank=True, help_text='An optional name field that will be displayed as the author of this page instead of the user who created it.', max_length=127, null=True),
        ),
        migrations.AddField(
            model_name='featuredinventory',
            name='source_set',
            field=models.ForeignKey(blank=True, help_text='Optional, select a particular public set for the source associated with this inventory. The source must be a member of the set chosen or the page will not validate.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='featured_inventories', to='dalme_app.Set'),
        ),
        migrations.AddField(
            model_name='featuredobject',
            name='alternate_author',
            field=models.CharField(blank=True, help_text='An optional name field that will be displayed as the author of this page instead of the user who created it.', max_length=127, null=True),
        ),
        migrations.AddField(
            model_name='featuredobject',
            name='source_set',
            field=models.ForeignKey(blank=True, help_text='Optional, select a particular public set for the source associated with this object. The source must be a member of the set chosen or the page will not validate.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='featured_objects', to='dalme_app.Set'),
        ),
        migrations.AlterField(
            model_name='collections',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='essay',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='featuredinventory',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='featuredobject',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='features',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='flat',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='home',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='section',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
        migrations.AlterField(
            model_name='set',
            name='body',
            field=wagtail.core.fields.StreamField([('main_image', dalme_public.blocks.MainImageBlock()), ('inline_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock()), ('heading', wagtail.core.blocks.CharBlock()), ('pullquote', wagtail.core.blocks.RichTextBlock(icon='openquote')), ('document', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('abstract', wagtail.core.blocks.CharBlock()), ('version', wagtail.core.blocks.FloatBlock()), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('person', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('job', wagtail.core.blocks.CharBlock()), ('institution', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock(required=False)), ('photo', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('external_resource', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('info', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.URLBlock()), ('date', wagtail.core.blocks.DateBlock())])), ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')), ('html', wagtail.core.blocks.RawHTMLBlock()), ('subsection', wagtail.core.blocks.StructBlock([('subsection', wagtail.core.blocks.CharBlock()), ('collapsed', wagtail.core.blocks.BooleanBlock(default=True, required=False))]))]),
        ),
    ]
