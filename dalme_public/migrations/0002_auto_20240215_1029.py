# Generated by Django 4.2.2 on 2024-02-15 15:29
from django.db import connection, migrations

# For the given set of 'tenant' tables, only the 'dalme' schema should have any
# data at all in it (at this point), however, there is a complication in that
# the 'wagtailcore_pagerevision' table has been renamed to
# 'wagtailcore_revision' and none of those records have come over to the newly
# created schemas along with everything else. Therefore, we need to ensure we
# copy that data from the 'public' schema to the 'dalme' schema but into the
# new 'wagtailcore_revision' table in order to preserve it. The new 'Revision'
# model also has new fields so we need to meet the demands of those
# requirements here also.
#
# https://docs.wagtail.org/en/stable/releases/4.0.html#pagerevision-replaced-with-revision
# https://github.com/wagtail/wagtail/blob/222cf7de7205d5a248e9d4bcfecb35901e5220e1/wagtail/models/__init__.py#L2732

# We will do all of this here then and proceed to clean up the other schemas in
# a subsequent migration once the data is accounted for. Once all the data
# has been moved across we are free to delete the 'wagtailcore_pagerevision'
# table altogether.


def revision_mapper(apps, page_revision):
    """Remap page revision data to revision data."""
    ContentType = apps.get_model('contenttypes', 'ContentType')  # noqa: N806
    Page = apps.get_model('wagtailcore', 'Page')  # noqa: N806
    page_content_type = ContentType.objects.get_for_model(Page)

    page_id = page_revision.pop('page_id')
    content = page_revision.pop('content_json')

    # These pages currently exist in the 'public' schema so we need to query
    # for them in the correct place. Can't use the ORM here because the public
    # schema is migrated last and we can't query there when migrating DALME!
    cursor = connection.cursor()
    cursor.execute('SELECT * from public.wagtailcore_page WHERE id = %s', [page_id])
    row = cursor.fetchone()
    columns = [col[0] for col in cursor.description]
    data = dict(zip(columns, row))  # noqa: B905

    connection.set_schema('public', True)
    content_type = ContentType.objects.get(pk=data['content_type_id'])

    return {
        'base_content_type': page_content_type,
        'content_type': content_type,
        'object_id': page_id,
        'content': content,
        **page_revision,
    }


def migrate_page_revisions(apps, schema_editor):
    """Transform Wagtail PageRevision objects into Revision objects.

    Note, we only want this to run **once** when we are migrating the DALME
    tenant.

    """
    if connection.schema_name == 'dalme':
        cursor = connection.cursor()
        cursor.execute('SELECT * from public.wagtailcore_pagerevision;')
        columns = [col[0] for col in cursor.description]
        page_revisions = [dict(zip(columns, row, strict=True)) for row in cursor.fetchall()]

        connection.set_schema_to_public()
        revisions = [revision_mapper(apps, page_revision) for page_revision in page_revisions]

        Revision = apps.get_model('wagtailcore', 'Revision')  # noqa: N806

        connection.set_schema('dalme', True)
        Revision.objects.bulk_create([Revision(**revision) for revision in revisions], batch_size=1000)

        # We can now drop the stale pagerevision table from the 'public' schema.
        cursor.execute('DROP TABLE public.wagtailcore_pagerevision CASCADE;')


class Migration(migrations.Migration):
    dependencies = [
        ('dalme_public', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_page_revisions),
    ]
