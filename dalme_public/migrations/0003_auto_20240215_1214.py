# Generated by Django 4.2.2 on 2024-02-15 15:29
from django.db import connection, migrations

MOVE_SCHEMAS = """
DO $$
  DECLARE
  tb text;
BEGIN
  FOR tb IN
    SELECT table_name
    FROM information_schema.tables
    WHERE table_schema = 'public'
    AND table_name IN
    (SELECT table_name FROM information_schema.tables WHERE table_schema = 'dalme')
    AND table_name <> 'django_migrations'
    AND table_name <> 'wagtailcore_revision'
  LOOP
    -- Remove any existing data from the DALME schema per table.
    EXECUTE format('DROP TABLE dalme.%I CASCADE;', tb);

    -- Move the table from the public schema to the DALME schema.
    EXECUTE format('ALTER TABLE public.%I SET SCHEMA dalme;', tb);

    -- Recreate the table on the public schema.
    EXECUTE format('CREATE TABLE public.%I (LIKE dalme.%I INCLUDING ALL);', tb, tb);
  END LOOP;
END $$;
"""


def clean_schemas(apps, schema_editor):
    """Clean out data synced to any schemas except 'dalme'.

    Note, we only want this to run **once** after all the tenants have been
    created and synced.

    """
    if connection.schema_name == 'public':
        migrations.RunSQL(MOVE_SCHEMAS)


class Migration(migrations.Migration):
    dependencies = [
        ('dalme_public', '0002_auto_20240215_1029'),
    ]

    operations = [
        # We want to guard over the schema here so let's just drop down to SQL
        # via Python so we can control that.
        migrations.RunPython(clean_schemas),
    ]
