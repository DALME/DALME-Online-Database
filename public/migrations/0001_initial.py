# Generated by Django 5.0.3 on 2024-03-12 18:32

import modelcluster.fields
import taggit.managers
import wagtail.blocks
import wagtail.contrib.routable_page.models
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.images.models
import wagtail.models.collections
import wagtail.search.index

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import public.blocks


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('ida', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Collections',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'citable',
                    models.BooleanField(
                        default=True, help_text='Check this box to show the "Cite" menu for this page.'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Footer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'pages',
                    wagtail.fields.StreamField(
                        [
                            (
                                'page',
                                wagtail.blocks.StructBlock(
                                    [('title', wagtail.blocks.CharBlock()), ('page', wagtail.blocks.PageChooserBlock())]
                                ),
                            )
                        ],
                        null=True,
                    ),
                ),
                ('copyright', models.CharField(blank=True, max_length=255, null=True)),
                (
                    'social',
                    wagtail.fields.StreamField(
                        [
                            (
                                'social',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('fa_icon', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('css_class', wagtail.blocks.CharBlock(required=False)),
                                    ]
                                ),
                            )
                        ],
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'citable',
                    models.BooleanField(
                        default=True, help_text='Check this box to show the "Cite" menu for this page.'
                    ),
                ),
                (
                    'preview',
                    models.BooleanField(
                        default=False,
                        help_text='Check this box to set this collection to Preview mode only. It will be made public but not added to the search or map. Only people with the link will be able to access it.',
                    ),
                ),
                (
                    'source_set',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='public_collections',
                        to='ida.collection',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Corpus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=255)),
                ('description', wagtail.fields.RichTextField()),
                (
                    'collections',
                    modelcluster.fields.ParentalManyToManyField(related_name='corpora', to='public.collection'),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='corpora', to='public.collections'
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IDAImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                (
                    'file',
                    wagtail.images.models.WagtailImageField(
                        height_field='height',
                        upload_to=wagtail.images.models.get_upload_to,
                        verbose_name='file',
                        width_field='width',
                    ),
                ),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('file_hash', models.CharField(blank=True, db_index=True, editable=False, max_length=40)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                (
                    'collection',
                    models.ForeignKey(
                        default=wagtail.models.collections.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtailcore.collection',
                        verbose_name='collection',
                    ),
                ),
                (
                    'tags',
                    taggit.managers.TaggableManager(
                        blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags'
                    ),
                ),
                (
                    'uploaded_by_user',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='uploaded by user',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.images.models.ImageFileMixin, wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Home',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'sponsors',
                    wagtail.fields.StreamField(
                        [
                            (
                                'sponsors',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('logo', wagtail.images.blocks.ImageChooserBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                    ]
                                ),
                            )
                        ],
                        null=True,
                    ),
                ),
                (
                    'banners',
                    wagtail.fields.StreamField(
                        [
                            (
                                'banners',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.TextBlock()),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('start_date', wagtail.blocks.DateBlock()),
                                        ('end_date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            )
                        ],
                        null=True,
                    ),
                ),
                (
                    'learn_more_page',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'show_contact_form',
                    models.BooleanField(default=False, help_text='Check this box to show a contact form on the page.'),
                ),
                (
                    'citable',
                    models.BooleanField(
                        default=False, help_text='Check this box to show the "Cite" menu for this page.'
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Features',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FeaturedObject',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'alternate_author',
                    models.CharField(
                        blank=True,
                        help_text='An optional name field that will be displayed as the author of this page instead of the user who created it.',
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    'citable',
                    models.BooleanField(
                        default=True, help_text='Check this box to show the "Cite" menu for this page.'
                    ),
                ),
                (
                    'source',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='featured_objects',
                        to='ida.record',
                    ),
                ),
                (
                    'source_set',
                    models.ForeignKey(
                        blank=True,
                        help_text='Optional, select a particular public set for the source associated with this object. The source must be a member of the set chosen or the page will not validate.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='featured_objects',
                        to='ida.collection',
                    ),
                ),
                (
                    'front_page_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display on the front page.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='public.idaimage',
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Object',
                'verbose_name_plural': 'Objects',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FeaturedInventory',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'alternate_author',
                    models.CharField(
                        blank=True,
                        help_text='An optional name field that will be displayed as the author of this page instead of the user who created it.',
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    'citable',
                    models.BooleanField(
                        default=True, help_text='Check this box to show the "Cite" menu for this page.'
                    ),
                ),
                (
                    'source',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='featured_inventories',
                        to='ida.record',
                    ),
                ),
                (
                    'source_set',
                    models.ForeignKey(
                        blank=True,
                        help_text='Optional, select a particular public set for the source associated with this inventory. The source must be a member of the set chosen or the page will not validate.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='featured_inventories',
                        to='ida.collection',
                    ),
                ),
                (
                    'front_page_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display on the front page.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='public.idaimage',
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventories',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ExplorePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'text_before',
                    wagtail.fields.StreamField(
                        [
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                        ],
                        null=True,
                    ),
                ),
                (
                    'text_after',
                    wagtail.fields.StreamField(
                        [
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                        ],
                        null=True,
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Essay',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'alternate_author',
                    models.CharField(
                        blank=True,
                        help_text='An optional name field that will be displayed as the author of this page instead of the user who created it.',
                        max_length=127,
                        null=True,
                    ),
                ),
                (
                    'citable',
                    models.BooleanField(
                        default=True, help_text='Check this box to show the "Cite" menu for this page.'
                    ),
                ),
                (
                    'source',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='essays',
                        to='ida.record',
                    ),
                ),
                (
                    'source_set',
                    models.ForeignKey(
                        blank=True,
                        help_text='Optional, select a particular public set for the source associated with this essay. The source must be a member of the set chosen or the page will not validate.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='essays',
                        to='ida.collection',
                    ),
                ),
                (
                    'front_page_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display on the front page.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='public.idaimage',
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Mini Essay',
                'verbose_name_plural': 'Mini Essays',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='collections',
            name='header_image',
            field=models.ForeignKey(
                blank=True,
                help_text='The image that will display in the header.',
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='+',
                to='public.idaimage',
            ),
        ),
        migrations.AddField(
            model_name='collection',
            name='header_image',
            field=models.ForeignKey(
                blank=True,
                help_text='The image that will display in the header.',
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='+',
                to='public.idaimage',
            ),
        ),
        migrations.CreateModel(
            name='Bibliography',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='RecordBrowser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='RecordViewer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='SearchPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'help_content',
                    wagtail.fields.StreamField(
                        [('text', wagtail.blocks.RichTextBlock()), ('html', wagtail.blocks.RawHTMLBlock())], null=True
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'header_position',
                    models.CharField(
                        choices=[('top', 'Top'), ('center', 'Center'), ('bottom', 'Bottom')],
                        default='top',
                        help_text='Position of the header image within its container.',
                        max_length=6,
                    ),
                ),
                (
                    'short_title',
                    models.CharField(
                        blank=True,
                        help_text='An optional short title that will be displayed in certain space constrained contexts.',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            ('main_image', public.blocks.MainImageBlock()),
                            ('carousel', public.blocks.CarouselBlock(wagtail.images.blocks.ImageChooserBlock())),
                            (
                                'chart_embed',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('html', wagtail.blocks.RawHTMLBlock()),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('left', 'Left-aligned'),
                                                    ('right', 'Right-aligned'),
                                                    ('full', 'Full-width'),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'inline_image',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('image', wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            'image_id',
                                            wagtail.blocks.CharBlock(
                                                help_text='Can be used as an anchor to link to the image.',
                                                required=False,
                                            ),
                                        ),
                                        ('caption', wagtail.blocks.RichTextBlock(required=False)),
                                        (
                                            'alignment',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[('left', 'Left-aligned'), ('right', 'Right-aligned')]
                                            ),
                                        ),
                                        ('show_caption', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        (
                                            'resize_rule',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('max', 'Fit within the given dimensions'),
                                                    ('min', 'Cover the given dimensions'),
                                                    ('width', 'Reduce width to the given dimension'),
                                                    ('height', 'Reduce height to the given dimension'),
                                                    ('scale', 'Resize to the given percentage'),
                                                    ('fill', 'Resize and crop to the given dimensions'),
                                                    ('background', 'As background with given parameters'),
                                                ],
                                                help_text='Resize the image using one of <a href="https://docs.wagtail.org/en/v2.13.5/topics/images.html" target="_blank">Wagtail\'s built-in rules</a>            or use it as a background and style it with CSS. If the latter is chosen, the dimensions will be used to determine the size of the containing &lt;div&gt;.',
                                                required=False,
                                            ),
                                        ),
                                        (
                                            'dimensions',
                                            wagtail.blocks.CharBlock(
                                                help_text='Width and height separated by an "x", e.g. "400x200". The maximum allowed width for an inline image is 308px.',
                                                required=False,
                                                validators=[public.blocks.validate_dimensions],
                                            ),
                                        ),
                                        (
                                            'parameters',
                                            wagtail.blocks.CharBlock(
                                                help_text='CSS parameters to be used if the image is displayed as a background, e.g. "no-repeat top/cover".',
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ('text', wagtail.blocks.RichTextBlock()),
                            ('heading', wagtail.blocks.CharBlock()),
                            ('pullquote', wagtail.blocks.RichTextBlock(icon='openquote')),
                            ('page', wagtail.blocks.PageChooserBlock()),
                            (
                                'bibliography',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'collection',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('A4QHN348', 'Editions'),
                                                    ('BKW2PVCM', 'Glossaries and dictionaries'),
                                                    ('QM9AZNT3', 'Methodology'),
                                                    ('SLIT6LID', 'Studies'),
                                                    ('FRLVXUWL', 'Other resources'),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                'document',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'type',
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ('document', 'Document'),
                                                    ('publication', 'Publication'),
                                                    ('talk', 'Talk'),
                                                ]
                                            ),
                                        ),
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('abstract', wagtail.blocks.CharBlock(required=False)),
                                        ('author', wagtail.blocks.CharBlock()),
                                        ('detail', wagtail.blocks.CharBlock(required=False)),
                                        ('version', wagtail.blocks.FloatBlock(required=False)),
                                        ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('page', wagtail.blocks.PageChooserBlock(required=False)),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            (
                                'person',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('name', wagtail.blocks.CharBlock()),
                                        ('job', wagtail.blocks.CharBlock(required=False)),
                                        ('institution', wagtail.blocks.CharBlock(required=False)),
                                        ('url', wagtail.blocks.URLBlock(required=False)),
                                        ('photo', wagtail.images.blocks.ImageChooserBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                'external_resource',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('title', wagtail.blocks.CharBlock()),
                                        ('info', wagtail.blocks.CharBlock()),
                                        ('url', wagtail.blocks.URLBlock()),
                                        ('date', wagtail.blocks.DateBlock()),
                                    ]
                                ),
                            ),
                            ('embed', wagtail.embeds.blocks.EmbedBlock(icon='media')),
                            ('html', wagtail.blocks.RawHTMLBlock()),
                            (
                                'subsection',
                                wagtail.blocks.StructBlock(
                                    [
                                        ('subsection', wagtail.blocks.CharBlock()),
                                        ('collapsed', wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ('minor_heading', wagtail.blocks.BooleanBlock(default=False, required=False)),
                                    ]
                                ),
                            ),
                            ('subsection_end_marker', wagtail.blocks.StructBlock([])),
                            ('footnotes_placemarker', wagtail.blocks.StructBlock([])),
                        ],
                        null=True,
                    ),
                ),
                (
                    'header_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='The image that will display in the header.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='public.idaimage',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CustomRendition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                (
                    'file',
                    wagtail.images.models.WagtailImageField(
                        height_field='height',
                        storage=wagtail.images.models.get_rendition_storage,
                        upload_to=wagtail.images.models.get_rendition_upload_to,
                        width_field='width',
                    ),
                ),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                (
                    'image',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='public.idaimage'
                    ),
                ),
            ],
            options={
                'unique_together': {('image', 'filter_spec', 'focal_point_key')},
            },
            bases=(wagtail.images.models.ImageFileMixin, models.Model),
        ),
    ]
