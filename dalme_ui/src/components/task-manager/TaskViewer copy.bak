<template>
  <q-dialog
    ref="dialogRef"
    no-esc-dismiss
    transition-show="scale"
    transition-hide="scale"
    :class="`frosted-background ${classes}`"
    @hide="onDialogHide"
  >
    <div class="action-modal-card">
      <div class="card-drawer" :class="openDrawer ? 'show' : ''">
        <template v-if="openDrawer && tm.lists.isReady">
          <div class="q-mb-md">
            <div class="tasklist-toolbar">
              <TasklistManager :lists="tm.lists.grouped" />
            </div>
          </div>
          <div class="q-mb-md">
            <TaskList :data="tm.tasks.created" />
          </div>
        </template>
      </div>
      <div class="card-main">
        <div class="title-row">
          <q-btn
            v-if="showLists"
            flat
            dense
            class="q-pa-none"
            :icon="openDrawer ? 'mdi-list-box' : 'mdi-list-box-outline'"
            :color="openDrawer ? 'deep-purple-4' : 'blue-grey-7'"
            @click="openDrawer = !openDrawer"
          />
          <q-separator vertical class="title-separator" />
          <div class="items-center text-h5 text-white">
            {{ task.title }}
          </div>
          <q-chip
            :icon="
              task.completed
                ? 'mdi-check-circle'
                : 'mdi-dots-horizontal-circle-outline'
            "
            :label="task.completed ? 'DONE' : 'PENDING'"
            :color="task.completed ? 'light-green-9' : 'deep-purple-6'"
            text-color="white"
            size="12px"
            class="q-ml-md"
          />
          <q-btn
            icon="mdi-close"
            flat
            round
            dense
            v-close-popup
            class="q-ml-auto"
          />
        </div>
        <div class="title-row q-pt-xs q-pb-sm">
          <DetailPopover :userData="task.creationUser" />
          <span
            v-text="` created this task ${formatDate(task.creationTimestamp)}`"
          />
        </div>
        <q-separator class="q-mb-lg" />
        <div class="row">
          <div class="col-9 q-pr-md">
            <q-card flat class="q-mb-md">
              <q-card-section
                :class="
                  task.commentCount > 0
                    ? 'q-pt-none q-pr-none'
                    : 'q-pt-none q-pr-none comments-container dark'
                "
              >
                <div class="comment_thread dark q-mt-none q-pb-lg">
                  <q-item class="q-pb-sm q-pt-none q-px-none">
                    <q-item-section top avatar>
                      <q-avatar v-if="task.creationUser.avatar" size="40px">
                        <img :src="task.creationUser.avatar" />
                      </q-avatar>
                      <q-avatar
                        v-else
                        size="40px"
                        icon="account_circle"
                        color="grey-4"
                        text-color="grey-6"
                      />
                    </q-item-section>
                    <q-item-section>
                      <q-card flat bordered class="box-left-arrow dark">
                        <q-card-section class="comment-head">
                          <DetailPopover
                            :userData="task.creationUser"
                            :showAvatar="false"
                          />
                          commented {{ formatDate(task.creationTimestamp) }}
                        </q-card-section>
                        <q-separator />
                        <q-card-section class="text-body2">
                          <MarkdownEditor
                            v-if="task.description"
                            :text="task.description"
                            dark
                          />
                          <span v-else>No description provided.</span>
                        </q-card-section>
                      </q-card>
                    </q-item-section>
                  </q-item>
                </div>
                <CommentWidget dark>
                  <template v-if="task.completed" v-slot:comment-stream-end>
                    <div
                      class="comment_thread dark row items-center q-mt-none q-pb-lg"
                    >
                      <div class="closing-dot bg-deep-purple-6">
                        <q-icon
                          name="o_check_circle"
                          color="white"
                          size="20px"
                        />
                      </div>
                      <div class="closing-dot-label">
                        this task was completed
                        {{ formatDate(task.completedDate) }}
                      </div>
                    </div>
                  </template>
                </CommentWidget>
              </q-card-section>
            </q-card>
          </div>
          <div class="col-3 q-pl-md">
            <div class="q-mb-sm text-13">
              <q-btn
                v-if="auth.isAdmin"
                dense
                outline
                no-caps
                :color="buttonColours.colour"
                :class="`action-button bg-${buttonColours.colour} q-ml-auto`"
                :text-color="buttonColours.text"
                :label="capitalize(action)"
                @click.stop="onAction"
              />
            </div>
            <q-separator class="q-my-md" />
            <div class="text-detail text-grey-8 text-weight-bold q-mb-sm">
              Assignees
            </div>
            <div class="q-mb-sm text-13">
              <span>No one assigned</span>
            </div>
            <q-separator class="q-my-md" />

            <div class="text-detail text-grey-8 text-weight-bold q-mb-sm">
              Attachments
            </div>
            <div class="q-mb-sm text-13">
              <AttachmentWidget v-if="attachment" />
              <span v-else>None yet</span>
            </div>
            <q-separator class="q-my-md" />

            <div class="text-detail text-grey-8 text-weight-bold q-mb-sm">
              Links
            </div>
            <div class="q-mb-sm text-13">
              <span>None yet</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </q-dialog>
</template>

<script>
import { useDialogPluginComponent, format } from "quasar";
import { computed, provide, ref, watch } from "vue";
import { formatDate } from "@/utils";
import { useAuthStore } from "@/stores/auth";
import { useTasks } from "@/stores/tasks";
import TasklistManager from "./TasklistManager.vue";
import TaskList from "./TaskList.vue";
import {
  AttachmentWidget,
  CommentWidget,
  DetailPopover,
  MarkdownEditor,
} from "@/components";

export default {
  props: {
    task: {
      type: Object,
      required: true,
    },
    closeIcon: {
      type: Boolean,
      default: false,
    },
    classes: {
      type: String,
      default: "dialogue-top",
    },
  },
  components: {
    AttachmentWidget,
    CommentWidget,
    DetailPopover,
    MarkdownEditor,
    TasklistManager,
    TaskList,
  },
  emits: [...useDialogPluginComponent.emits],
  setup(props) {
    const { dialogRef, onDialogHide } = useDialogPluginComponent();
    const auth = useAuthStore();
    const { capitalize } = format;
    const tm = useTasks();
    const action = computed(() =>
      props.task.completed ? "reopen task" : "complete task",
    );
    const attachment = ref(null);
    const id = ref(props.task.id);
    const buttonColours = computed(() =>
      action.value === "reopen task"
        ? { colour: "green-1", text: "green-7" }
        : { colour: "deep-purple-1", text: "deep-purple-6" },
    );
    const openDrawer = ref(false);
    const showLists = ref(true);

    const onAction = () => {
      console.log("action");
    };

    provide("attachment", attachment);
    provide("model", "Task");
    provide("id", id);

    watch(
      () => openDrawer.value,
      () => {
        if (!tm.lists.isReady) {
          tm.lists.init();
        }
      },
    );

    return {
      action,
      attachment,
      buttonColours,
      capitalize,
      formatDate,
      dialogRef,
      onDialogHide,
      onAction,
      auth,
      openDrawer,
      showLists,
      tm,
    };
  },
};
</script>

<style lang="scss">
.dialogue-top .q-dialog__inner {
  align-items: flex-start;
  padding: 75px 150px 50px 150px;
}
.q-dialog__inner > div.action-modal-card {
  display: flex;
  flex-direction: row;
  width: 100%;
  min-width: 580px !important;
  max-width: 1500px !important;
  max-height: calc(100vh - 125px);
  padding: 18px 18px 18px 0;
  background: #0a141c;
  border-radius: 12px;
  border: 1px solid #2a3b44;
  box-shadow: 0 5px 24px 0px rgb(0 0 0 / 48%);
  transition: all 0.1s linear;
  color: #959fad;
}
.action-modal-card .q-card {
  background: #0a141c;
  border-color: #2a3b44;
}
.action-modal-card .q-separator {
  background: #2a3b44;
}
.card-main {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  padding-left: 18px;
  // max-width: 1000px;
}
.card-drawer {
  display: flex;
  flex-direction: column;
  width: 0;
  opacity: 0;
  transition: all 0.3s linear;
  border-radius: 0 !important;
  border-right: 1px solid #e0e0e0 !important;
  padding-left: 18px;
}
.card-drawer.show {
  width: 350px;
  opacity: 1;
}
.title-row {
  display: flex;
  align-items: center;
  white-space: break-spaces;
}
.title-separator {
  height: 26px;
  align-self: center;
  margin: 0 12px;
}
.tasklist-toolbar {
  background: whitesmoke;
  border-top: 1px solid #d1d1d1;
  border-bottom: 1px solid #d1d1d1;
  border-left: 1px solid #d1d1d1;
  border-top-left-radius: 6px;
}

// OLD
.hero-bg {
  height: 150px;
  overflow: hidden;
  display: flex;
}
.standard .hero-bg {
  background-color: #343e72;
  background-image: linear-gradient(59deg, #343e72 54.62%, #1b1b1b);
}
.edit-mode .hero-bg {
  background-color: #6f5423;
  background-image: linear-gradient(59deg, #6f5423 54.62%, #1b1b1b);
}
.warning .hero-bg {
  background-color: #6b2828;
  background-image: linear-gradient(59deg, #6b2828 54.62%, #1b1b1b);
}
.hero-icon {
  color: white;
  font-size: 200pt;
  transform: rotate(20deg);
  opacity: 0.1;
  position: relative;
  top: -60%;
  left: 13%;
  text-shadow: -20px -20px 7px black;
}
.hero-text {
  width: 300px;
  position: relative;
  align-self: center;
  font-size: 40px;
  font-weight: 200;
  color: white;
  text-transform: capitalize;
  text-shadow: -15px 2px 14px black;
  margin-left: -235px;
  text-align: center;
}
.hero-button {
  position: absolute;
  top: 10px;
  right: 10px;
  color: #ffffff6e;
}
.dialogue-body {
  padding: 20px 40px !important;
  font-size: 16px;
  font-weight: 300;
}
.dialogue-button {
  font-size: 14px;
  font-weight: 400;
  padding: 0 20px !important;
}
.standard .dialogue-button.cancel {
  color: #7986cb;
}
.standard .dialogue-button.okay {
  background: #3f51b5;
  color: white;
}
.edit-mode .dialogue-button.cancel {
  color: #a85e00;
}
.edit-mode .dialogue-button.okay {
  background: #c87001;
  color: white;
}
.warning .dialogue-button.cancel {
  background: #577b5c;
  color: white;
}
.warning .dialogue-button.okay {
  background: #b14747;
  color: white;
}
</style>
